{"ast":null,"code":"var _jsxFileName = \"/Users/ptk/Desktop/meegu/src/contexts/Authentication/AuthContext.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { createContext, useEffect, useState } from \"react\";\nimport { setCookie, parseCookies } from 'nookies';\nimport Router from 'next/router';\nimport { recoverUserInformation, signInRequest } from \"../../services/auth\";\nimport { api } from \"../../services/api\";\nexport const AuthContext = createContext({});\nexport function AuthProvider({\n  children\n}) {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  const isAuthenticated = !!user;\n  useEffect(() => {\n    const {\n      '@gok/token': token\n    } = parseCookies();\n\n    if (token) {\n      recoverUserInformation().then(response => {\n        setUser(response.user);\n      });\n    }\n  }, []);\n\n  async function signIn({\n    email,\n    senha\n  }) {\n    try {\n      const {\n        token,\n        user\n      } = await signInRequest({\n        email,\n        senha\n      });\n      setCookie(undefined, '@gok/token', token, {\n        maxAge: 60 * 60 * 1 // 1 hour\n\n      });\n      api.defaults.headers['Authorization'] = `Bearer ${token}`;\n      setUser(user);\n      Router.push('/dashboard');\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return __jsx(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      signIn\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, children);\n}","map":{"version":3,"sources":["/Users/ptk/Desktop/meegu/src/contexts/Authentication/AuthContext.tsx"],"names":["createContext","useEffect","useState","setCookie","parseCookies","Router","recoverUserInformation","signInRequest","api","AuthContext","AuthProvider","children","user","setUser","isAuthenticated","token","then","response","signIn","email","senha","undefined","maxAge","defaults","headers","push","error","console"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,SAAxC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,SAASC,sBAAT,EAAiCC,aAAjC,QAAsD,qBAAtD;AACA,SAASC,GAAT,QAAoB,oBAApB;AAIA,OAAO,MAAMC,WAAW,GAAGT,aAAa,CAAC,EAAD,CAAjC;AAEP,OAAO,SAASU,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoC;AACzC,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBX,QAAQ,CAAM,IAAN,CAAhC;AAEA,QAAMY,eAAe,GAAG,CAAC,CAACF,IAA1B;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAE,oBAAcc;AAAhB,QAA0BX,YAAY,EAA5C;;AAEA,QAAIW,KAAJ,EAAW;AACTT,MAAAA,sBAAsB,GAAGU,IAAzB,CAA8BC,QAAQ,IAAI;AACxCJ,QAAAA,OAAO,CAACI,QAAQ,CAACL,IAAV,CAAP;AACD,OAFD;AAGD;AACF,GARQ,EAQN,EARM,CAAT;;AAUA,iBAAeM,MAAf,CAAsB;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAtB,EAAoD;AAElD,QAAI;AACF,YAAM;AAAEL,QAAAA,KAAF;AAASH,QAAAA;AAAT,UAAkB,MAAML,aAAa,CAAC;AAC1CY,QAAAA,KAD0C;AAE1CC,QAAAA;AAF0C,OAAD,CAA3C;AAKAjB,MAAAA,SAAS,CAACkB,SAAD,EAAY,YAAZ,EAA0BN,KAA1B,EAAiC;AACxCO,QAAAA,MAAM,EAAE,KAAK,EAAL,GAAU,CADsB,CACnB;;AADmB,OAAjC,CAAT;AAIAd,MAAAA,GAAG,CAACe,QAAJ,CAAaC,OAAb,CAAqB,eAArB,IAAyC,UAAST,KAAM,EAAxD;AAEAF,MAAAA,OAAO,CAACD,IAAD,CAAP;AAEAP,MAAAA,MAAM,CAACoB,IAAP,CAAY,YAAZ;AACD,KAfD,CAeE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF;;AAED,SACE,MAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEd,MAAAA,IAAF;AAAQE,MAAAA,eAAR;AAAyBI,MAAAA;AAAzB,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,QADH,CADF;AAKD","sourcesContent":["import { createContext, useEffect, useState } from \"react\";\nimport { setCookie, parseCookies } from 'nookies'\nimport Router from 'next/router'\n\nimport { recoverUserInformation, signInRequest } from \"../../services/auth\";\nimport { api } from \"../../services/api\";\nimport { AuthContextType, SignInData } from \"./Types\";\n\n\nexport const AuthContext = createContext({} as AuthContextType)\n\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState<any>(null)\n\n  const isAuthenticated = !!user;\n\n  useEffect(() => {\n    const { '@gok/token': token } = parseCookies()\n\n    if (token) {\n      recoverUserInformation().then(response => {\n        setUser(response.user)\n      })\n    }\n  }, [])\n\n  async function signIn({ email, senha }: SignInData) {\n\n    try {\n      const { token, user } = await signInRequest({\n        email,\n        senha\n      })\n  \n      setCookie(undefined, '@gok/token', token, {\n        maxAge: 60 * 60 * 1, // 1 hour\n      })\n  \n      api.defaults.headers['Authorization'] = `Bearer ${token}`;\n  \n      setUser(user)\n  \n      Router.push('/dashboard'); \n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return (\n    <AuthContext.Provider value={{ user, isAuthenticated, signIn }}>\n      {children}\n    </AuthContext.Provider>\n  )\n}"]},"metadata":{},"sourceType":"module"}